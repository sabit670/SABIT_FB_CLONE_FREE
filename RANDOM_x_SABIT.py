
# Encoded by SABIT
# FOLLOW ME 
# OR FUCK YOU 

import marshal, base64, hashlib

def xor_bytes(data, key):
    return bytes([b ^ key[i % len(key)] for i, b in enumerate(data)])

key = [90, 85, 89, 65, 78, 95, 83, 69, 67, 82, 69, 84, 95, 75, 69, 89, 95, 49, 50, 51, 52, 53]  # Key as list of ints

encoded_data = ""
expected_hash = "4d8db48d702de1306c0166bf9ddd008c55d8bf18b342469263ee3bafdd203767"

encrypted = base64.b64decode(encoded_data)
decrypted = xor_bytes(encrypted, bytes(key))

actual_hash = hashlib.sha256(decrypted).hexdigest()
if actual_hash != expected_hash:
    raise RuntimeError("Code integrity check failed!")

code = marshal.loads(decrypted)
exec(code)
